#----------------------------------------------------------------------
# Copyright 2012 EPCC, The University of Edinburgh
#
# This file is part of bolt.
#
# bolt is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# bolt is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with bolt.  If not, see <http://www.gnu.org/licenses/>.
#----------------------------------------------------------------------
#
#+TITLE:     bolt User's Guide
#+AUTHOR:    Andrew Turner
#+EMAIL:     a.turner@epcc.ed.ac.uk
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t ^:{}
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 

Produce job submission scripts using a common interface.

* Summary

This tool produces job submission scripts for a variety of compute
resources and batch systems. It attempts to partition the work in a
pseudo-optimal way and select sensible options. It will also include
compusory options required on particular resources.

* Limitations

Currently designed for 
+ distributed-memory jobs (MPI or CAF/UPC),
+ shared-memeory jobs (using OpenMP threading),
+ hybrid jobs (mixed OpenMP/MPI).


* Usage

#+BEGIN_SRC bash
bolt [options] executable_file arg1 arg2 ...
#+END_SRC

The /executable_file/ is the program or command you wish to run in your
job submission script. all options are explained in the following Chapter and can also be seen by running

#+BEGIN_SRC bash
bolt -h
#+END_SRC

Note: If you are specifying a parallel job then the program or command you
specify will be appended to the parallel launch command (/e.g./ 'mpirun')
so you cannot currently create jobs where the parallel launch command exists
in a sub-script.

* Options

+ -a,--account <account>   :: Specify the account to charge the job to. If
                              not specified then it is not included in the
                              output.
+ -b,--batch <batch>       :: Specify the batch system to create job submission
                              script for. Default is specified by the resource
                              configuration. Use the '-l' option to list valid
                              values.
+ -c,--code <code>         :: Specify a simulation code to generate a batch
                              script for. Use the '-l' option to list valid 
                              values and details on the arguments that should
                              be provided.
+ -d,--threads <n>         :: The number of shared-memory threads per parallel
                              task. Default is 1.
+ -h,--help                :: Show this help.
+ -i,--info                :: Print the program licence and warranty.
+ -j,--job-name            :: The job name. Defaults to the name of the 
                              specified executable.
+ -l,--list                :: List the resources and batch systems available.
+ -n,--tasks <n>           :: Number of parallel tasks. Defaults to 1. If
                              number of parallel tasks is 1 then the tool
                              will try to produce a serial job submission
                              script (unless the '-p' option is specified).
+ -N,--tasks-per-node <n>  :: Number of parallel tasks per node. Defaults to
                              the minimum of the number of tasks or the number
                              of cores per node for the specified resource.
+ -o,--output <filename>   :: The output filename to use. The default is
                              "a.bolt".
+ -p,--force-parallel      :: Force the tool to create a parallel job even if
                              the number of tasks is 1.
+ -q,--queue <queue>       :: Specify the queue to submit the job to. This 
                              will usually be set correctly by default.
+ -r,--resource <resource> :: Specify the resource to create a job submission
                              script for. Default is set by the install system.
                              Use the '-l' option to list valid values.
+ -s,--submit              :: Submit the created job submission script to the
			      batch system. Default is not to submit job.
+ -t,--job-time <hh:mm:ss> :: Specify the wallclock limit for the job.

* PRACE machines

The bolt submission tool has been tested on the following PRACE machines and batch systems:
+ FERMI (CINECA) [1], LoadLeveler
+ HECToR (EPCC)  [2], PBSPro
+ Stokes (ICHEC) [3], Torque
+ SuperMUC (LRZ) [4], LoadLeveler 

* Examples

** Serial jobs

To create a serial job submission script to run the program 'postprocess.x'
with the arguments 'input.file' and 'output.file' for 20 minutes you would use:

#+BEGIN_SRC bash
bolt -t 0:20:0 postprocess.x input.file output.file
#+END_SRC

You would then need to submit the job with the job submission command on your
compute resource. To have bolt submit the job for you, you can add the '-s'
option:

#+BEGIN_SRC bash
bolt -s -t 0:20:0 postprocess.x input.file output.file
#+END_SRC

If you wish to force your serial job to run in the parallel queues - for
example, to use compute nodes which may be of a different architecture to 
the nodes that run serial jobs you add the '-p' option:

#+BEGIN_SRC bash
bolt -p -t 0:20:0 postprocess.x input.file output.file
#+END_SRC

To specify the name of the job submission script to create you can use the 
'-o' option:

#+BEGIN_SRC bash
bolt -p -t 0:20:0 -o post.bolt postprocess.x input.file output.file
#+END_SRC

(If you do not specify an output file name then the default 'a.bolt' will
be used.)

If serial jobs are not supported on a given machine. eg. Stokes (as specified in the /configuration/resource/Stokes.resource 
file), running bolt 

#+BEGIN_SRC bash
bolt -r Stokes a.out
#+END_SRC

will produce an output that looks like the following:

#+BEGIN_EXAMPLE
===========================================================================
bolt 0.5
---------------------------------------------------------------------------
Copyright 2012  EPCC, The University of Edinburgh 
This program comes with ABSOLUTELY NO WARRANTY; for details type `bolt -i'.
This is free software, and you are welcome to redistribute it
under certain conditions; type `bolt -i' for details.
===========================================================================
++Warning++ Using default output file name: a.bolt
++Warning++ Setting job name to: bolt_ser_job
++Warning++ Using default job walltime of 5 mins
++Warning++ Setting number of parallel tasks to 1
++Warning++ Setting number of tasks per node to 1
++Warning++ Setting accounting code to staff
 This is a SERIAL job.
**ERROR** Resource: Stokes does not support serial jobs.

#+END_EXAMPLE

** Parallel jobs

To create a parallel job submission script to run the program 'castep' with 
the argument 'alx3' over 2048 cores for 6 hours you would use:

#+BEGIN_SRC bash
bolt -t 6:0:0 -n 2048 castep alx3
#+END_SRC

If you wanted to specify the number of cores per node to use then you can
use the '-N' option. For example, on a system with 32 cores per node we
may want to use only 16 of them to allow extra memory for each parallel
task:

#+BEGIN_SRC bash
bolt -t 6:0:0 -n 2048 -N 16 castep alx3
#+END_SRC

To specify the name of the job submission script to create you can use the 
'-o' option:

#+BEGIN_SRC bash
bolt -t 6:0:0 -n 2048 -N 16 -o castep_job.bolt castep alx3
#+END_SRC

To produce a batch script for HECToR, for the executable 'a.out' on 32 processors, type

#+BEGIN_SRC bash
bolt -r HECToR -n 32 a.out
#+END_SRC

You will see

#+BEGIN_EXAMPLE
===========================================================================
bolt 0.5
---------------------------------------------------------------------------
Copyright 2012  EPCC, The University of Edinburgh 
This program comes with ABSOLUTELY NO WARRANTY; for details type `bolt -i'.
This is free software, and you are welcome to redistribute it
under certain conditions; type `bolt -i' for details.
===========================================================================
++Warning++ Using default output file name: a.bolt
++Warning++ Setting job name to: bolt_par_job
++Warning++ Using default job walltime of 5 mins
++Warning++ Setting number of tasks per node to 32
++Warning++ Setting accounting code to staff
 This is a PARALLEL job.
This is an MPI job. 
The batch system used for parallel script is: PBSPro

#+END_EXAMPLE

The resulting batch script, 'a.bolt' will be:

#+BEGIN_EXAMPLE
#!/bin/bash --login
#
# Parallel script produced by bolt
#        Resource: HECToR (Cray XE6 (32-core per node))
#    Batch system: PBSPro
#
# bolt is written by EPCC (http://www.epcc.ed.ac.uk)
#
#PBS -l mppwidth=32
#PBS -N bolt_par_job
#PBS -A staff
#PBS -l walltime=0:5:0


# Switch to current working directory
cd $PBS_O_WORKDIR

# Run the parallel program
aprun -n 32 -N 32 -S 8 -d 1  a.out

#+END_EXAMPLE


(If you do not specify an output file name then the default 'a.bolt' will
be used.)

** OpenMP jobs

The '-d' option to bolt allows you to specify the number of OpenMP threads to use. If the number of parallel tasks is 1 (the default) then you will get a pure OpenMP job. If you have more than one parallel task then bolt will produce a script for a hybrid MPI/OpenMP job.

For example, to run a 4 thread, 6 hour OpenMP job with the executable 'my_omp.x' you would use:

#+BEGIN_SRC bash
bolt -d 4 -t 6:0:0 -o my_omp_job.bolt my_omp.x
#+END_SRC

To produce a batch script for SuperMUC, for the executable 'a.out' using 12 threads, type

#+BEGIN_SRC bash
bolt -r SuperMUC -d 12 a.out
#+END_SRC

You will see

#+BEGIN_EXAMPLE
===========================================================================
bolt 0.5
---------------------------------------------------------------------------
Copyright 2012  EPCC, The University of Edinburgh 
This program comes with ABSOLUTELY NO WARRANTY; for details type `bolt -i'.
This is free software, and you are welcome to redistribute it
under certain conditions; type `bolt -i' for details.
===========================================================================
++Warning++ Using default output file name: a.bolt
++Warning++ Setting job name to: bolt_par_job
++Warning++ Using default job walltime of 5 mins
++Warning++ Setting number of parallel tasks to 1
++Warning++ Setting number of tasks per node to 1
 This is a PARALLEL job.
This is an OpenMP job.
The batch system used for parallel script is: LL_SuperMUC
#+END_EXAMPLE

The resulting batch script, 'a.bolt' will be:

#+BEGIN_EXAMPLE
#!/bin/bash
#
# Parallel script produced by bolt
#        Resource: SuperMUC (IBM SandyBridge EP cores)
#    Batch system: LL_SuperMUC
#
# bolt is written by EPCC (http://www.epcc.ed.ac.uk)
#
#@ node =1
#@ tasks_per_node =1
#@ job_name = bolt_par_job
#@ job_type = parallel
#@ wall_clock_limit =0:5:0
#@ class = general
#@ output = job$(jobid).out
#@ error = job$(jobid).err
#@ network.MPI = sn_all,not_shared,us
#@ initialdir = $(home)/myDir
#@ queue


export KMP_AFFINITY="granularity=core,compact,1"
. /etc/profile
. /etc/profile.d/modules.sh
module load prace
# Run the parallel program
export OMP_NUM_THREADS=12
  a.out

€+END_EXAMPLE

** Hybrid (mixed OpenMP/MPI) jobs

To run a hybrid MPI/OpenMP job using 1024 MPI tasks and 8 OpenMP threads per MPI task for 12 hours you would use:

#+BEGIN_SRC bash
bolt -n 1024 -d 8 -t 12:0:0 -o my_hybrid_job.bolt my_hybrid.x
#+END_SRC

* Specify simulation code

It is possible to specify a simulation code if the necessary file exists in the directory /configuration/codes/*.code.
To see what code files are available and what specific arguments they require, use 'bolt -l'. For example, to create a serial batch script for the CP2K-code use:

#+BEGIN_SRC bash
bolt -c CP2K inputFile outputFile
#+END_SRC

* Bugs

If you find any bugs please report them to [[epcc-support@epcc.ed.ac.uk]].

* References and further reading

+ [1] IBM FERMI User Guide, http://www.hpc.cineca.it/content/ibm-fermi-user-guide (2013)
+ [2] Running jobs on HECToR, http://www.hector.ac.uk/support/documentation/userguide/batch.php (2013)
+ [3] ICHEC, Srokes and Stoney Documentation, http://www.ichec.ie/support/documentation/ (2013)
+ [4] SuperMUC Petascale system, http://www.lrz.de/services/compute/supermuc/ (2013)
